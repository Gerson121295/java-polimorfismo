
--- Java Polimorfismo ---
https://github.com/alura-es-cursos/java-herencia-polimorfismo/tree/clase-4

//Gerente hereda los atributos de Funcionario por lo cual no es necesario
//definir los atributos.

//Usando la palabra super tenemos acceso a los metodos de la clase padre 
que estan en private.

			     Funcionario
    			     /	      \
	FuncionarioAutenticable	       \
		 /	   \	   	\  	-->Extends
	Administrador	Gerente	    	Contador


--This--
La palabra this se refiere al objeto actual en un metodo o constructor. El 
uso mas comun de este termino es eliminar la confusion entre los atributos
de clase y los parametros del mismo nombre (porque un atributo de clase esta
sombreado por un parametro de metodo o constructor). Ademos de este uso,
esta palabra se puede utilizar para:
* Invocar al constructor de la clase actual.
* Invocar el metodo de clase actual.
* Devuelve el objeto de clase actual.
* Pase un argumento en la llamada al metodo.
* Pase un argumento en la llamada al constructor.

-- Super --
La palabra clave super se refiere a objetos de superclase(madre). Se utiliza
para llamar a los metodos de la superclase y para acceder al constructor de
la superclase. El uso mas comun de la palabra clase super es eliminar la 
confusion entre superclases y subclases que tienen metodos con el mismo
nombre.
* super:
  - Utilizado para referirse a la variable de instancia de la clase 
    inmediatamente superior (clase madre).
  - Se usa para invocar metodos de la clase inmediatamente superior(clase madre).
* super();
  - Se utiliza para invocar al constructor de la clase inmediatamente
    superior (clase madre).


La palabra llave con menor visibilidad es private, después viene 
protected y después public.
private - solo visible dentro de la clase.
protected - visible dentro de la clase y también para las hijas.
public - visible en todo lugar.
También tenga en cuenta que protected está relacionado con la herencia.

         private < protected < public

//Usando la palabra super tenemos acceso a los metodos de la clase padre que estan en private
    //Sobreescritura de metodo: cuando en la clase padre y en la hija hay un metodo con el mismo nombre.


//Sobreescribir(escribir el mismo metodo de la clase madre en la clase hija)
 // el metodo getBonificacion de Funcionario(clase madre)
Sobreescribir un metodo en una clase, la hace mas especifica por lo 
que al llamar el metodo se hara desde la clase (se busca si primero esta
en la clase hija) y no de la clase madre.

@Override: Se utiliza para sobrescribir el método de la clase madre, 
lo que indica que se ha modificado el método original.

--Clase abstracta
public abstract class Funcionario {

/* La clase al ser abstracta no puede ser instanciada como tal
* Al ser abstracta es una representacion conceptual, pero no puede ser una
*representacion fisica del objeto.
*/
  //Funcionario gerson = new Funcionario();
  Funcionario gerson = new Contador(); //ahora la clase Funcionario es abstracta
  
Una clase abstracta representa un concepto, algo abstracto, y el 
compilador no permite instanciar un objeto de esa clase. Para crear 
una instancia, es necesario crear primero una clase hija no abstracta.

    //definimos un metodo abstracto el metodo de bonificicacion debido a que
    // solo lo definimos y las clases hijas seran las encargadas de implementarlo
    // sobreescribirlo
    /* Definimos un metodo abstracto ya que no queremos que tenga una
    implentacion(codigo dentro o el cuerpo) para dejar que sea implementado por las 
    clases hijas(que describan el codigo de funcionalidad del metodo)
        */
 //Tanto para la clase y el metodo abstracto: Al ser abstracto conceptualmente exite pero
// no exite realmente, no tiene implementacion. Este metodo obliga a las clases hijas a sobreescribirlas
//excepto si la clase hija es abstracta no es obligada a implementar el metodo abstracto de la clase padre.

un método abstracto define solo la firma (visibilidad, retorno, nombre del método y parámetros).
No tienen cuerpo (implementación), solo definen la firma.

public abstract double getBonificacion();

Una clase abstracta puede tener atributos(campos), puede referenciar objetos
no abstractos, puede tener constructores por defectos y personalizados, 
elementos estaticos, metodos concretos, reales, getters and setters.
Solo que ahora ya no puede ser instanciada por si sola, ahora solo puede
ser instanciada por una implementacion real, por una clase que extienda(herede)
de la clase abstracta. Un metodo abstracto necesita que la clase se abstracta.


//private double saldo; //cambio a private : encapsulamiento para que no se pueda obtener y modificar sin usar el metodo set o get
protected double saldo; //Protected saldo es accesible desde las clases hijas.
    
--- Interfaz: Palabra clave implements
La interfaz admite herencia multiple
Proporciona una abstraccion absoluta y no puede tener implementaciones de metodos
La interfaz no contiene constructor.
La interfaz no puede tener modificador de acceso, por defecto todos los
accesos son publicos.
Los miembros de la interfaz no pueden ser static.

--Clase Abstracta: Palabra clave extends
La clase abstracta no admite herencia multiple.
Puede tener metodos con implementaciones.
La clase abstracta contiene constructor.
La clase abstracta puede tener modificadores de acceso.
Solo los miembros completamente abstractos pueden ser static.

Las clases abstractas son útiles cuando queremos utilizar comportamientos y atributos basados ​​en clases con comportamientos comunes.
Los beneficios de la herencia siguen siendo válidos!
Usamos métodos abstractos cuando queremos "forzar" a un hijo concreto (clase concreta) a implementar un método.
Ese es el significado de los métodos abstractos, garantizar que el hijo implemente un comportamiento.

Sobre las clases abstractas:
-No se puede crear una instancia:porque lo abstracto (la clase) no puede 
volverse concreto (objeto). Por lo tanto, no podemos instanciar objetos 
de una clase abstracta.
-Puede tener métodos abstractos (sin implementación): como vimos, una 
clase abstracta puede tener métodos sin implementación. Por lo tanto, 
obligamos a un hijo a implementar el método.
-Pueden tener atributos: podemos tener atributos Una clase abstracta es 
una clase normal, simplemente no puede instanciar y puede tener métodos 
abstractos. ¡El resto sigue siendo válido!
-Puede tener métodos concretos (con implementación):pueden tener 
atributos, ¡también pueden tener métodos concretos!

--- Interfaces ---
En JAVA no podemos extens mas de una clase, una clase hija no puede tener 2 padres.
Una interfaz es una clase(tiene nombre, define atributos, metodos) es parecido
a la clase abstracta(el define la firma del metodo, pero puede dejarlo sin 
cuerpo para que uno de los hijos lo definan o implementen a su manera), 

Para definir una interfaces se debe agregar en lugar de class la palabra interface
La interfaz no puede tener metodos implementados(con cuerpos).

no hay herencia múltiple en Java. ¿Cómo podemos evitar la falta de ella?
Usando interfaces tenemos otra forma de lograr polimorfismo sin herencia.

-Podemos extender solo una clase abstracta, pero podemos implementar varias interfaces.
Solo existe una herencia simple en Java, pero podemos implementar tantas interfaces como queramos.
-Todos los métodos de una interfaz son abstractos, los de una clase abstracta pueden no serlo.
todos los métodos en la interfaz son siempre abstractos y siempre públicos.
En una clase abstracta podemos tener métodos concretos y abstractos.

En la interfaz todos los metodos son abstractos.
La interfaz no puede tener atributos privados porque no va a ver foma
de accesar a esos atributos por que no hay cuerpo en cada metodo.
Y al ser privado es inaccesible de otra parte del codigo.

Como toda interface es abstracta no es necesario escribir la palabra abstract
en las clase y en los metodos. 
Una interface no puede extender de ninguna clase.
Una interface puede extender de otra interface pero jamas de una clase.
public abstract interface Autenticable{
    public abstract void setClave(String clave);

Quedaria asi:
public interface Autenticable{
    public void setClave(String clave);

La interface me permite implementarlas en las clases, para hacerlo se usa
la palabra reservada: implements
Al implementar una interface en una clase se esta obligado en implementar
los metodos en esa clase.

public class Administrador implements Autenticable{


En una clase se puede extender(heredar) e implementar(implements) una interfaz
pero se tendrán que agregar los metodos de estas:
public class Administrador extends Funcionario implements Autenticable{

La interfaz es un rotulo que se le agrega al objeto. Para decir todo lo que
tenga este rotulo o etiqueta va a encontrar este metodo.
public boolean autentica(Autenticable gerente){ //interface Autenticable
La interfaz: Es un contrato donde el que firma es responsable de 
implementar estos métodos (cumplir el contrato).
La interfaz no puede tener variables, no puede tener constructor, no puede
tener metodos implementados, solo la firma del metodo(define el metodo mas no 
lo implementa).

-- polimorfismo
- Es la capacidad de un objeto de ser referenciado por varios tipos.
Podemos comunicarnos con un objeto a través de diferentes tipos de variables.
Por ejemplo, si hay una clase Gerente que sea hija de Funcionario. 
Un objeto de tipo Gerente puede ser referenciado como tipo Funcionario también.

-Tenemos polimorfismo cuando una clase se extiende de otra o 
también cuando una clase implementa una interfaz
tenemos polimorfismo por herencia o interfaz.

Link de diagrama:
https://drive.google.com/file/d/1enrPHmpC9rPggMMsCHzKzJtlZ_Uzmg6W/view?usp=sharing




			  












